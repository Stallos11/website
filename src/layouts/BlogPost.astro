---
import Layout from './Layout.astro';

interface Props {
  title: string;
  publishDate: string;
  description: string;
}

const { title, publishDate, description } = Astro.props;

// Get all headings from the content for the scrollspy
const headings = await Astro.slots.render('default').then(content => {
  const regex = /<h([2-3])[^>]*>(.*?)<\/h\1>/g;
  const matches = [...content.matchAll(regex)];
  return matches.map((match, index) => ({
    id: `section-${index}`,
    level: parseInt(match[1]),
    text: match[2].replace(/<[^>]*>/g, '')
  }));
});
---

<Layout title={title} description={description}>
  <article class="max-w-6xl mx-auto px-4 py-12 flex gap-8">
    <div class="w-full max-w-3xl">
      <div class="mb-8">
        <h1 class="text-5xl font-bold mb-2 bg-gradient-to-r from-blue-300 to-blue-500 text-transparent bg-clip-text">{title}</h1>
        <time class="text-gray-400">{publishDate}</time>
      </div>
      <div class="prose prose-invert max-w-none prose-headings:scroll-mt-20 prose-h2:text-3xl prose-h2:font-bold prose-h2:mb-6 prose-h2:mt-12 prose-h2:bg-gradient-to-r prose-h2:from-blue-300 prose-h2:to-blue-500 prose-h2:text-transparent prose-h2:bg-clip-text prose-h3:text-2xl prose-h3:font-semibold prose-h3:mb-4 prose-h3:mt-8 prose-h3:text-blue-300 prose-p:text-gray-300 prose-p:leading-relaxed prose-li:text-gray-300 prose-li:leading-relaxed">
        <slot />
      </div>
    </div>
    
    {headings.length > 0 && (
      <aside class="hidden lg:block w-64 relative">
        <div class="fixed w-64 p-6 bg-[#0a192f]/30 rounded-2xl border border-[#1a2333] backdrop-blur-sm">
          <h4 class="text-sm font-semibold text-gray-400 uppercase mb-4">Table of Contents</h4>
          <nav class="space-y-2">
            {headings.map((heading) => (
              <a
                href={`#${heading.id}`}
                class:list={[
                  'block text-sm py-1 transition-all duration-200',
                  'text-gray-400 hover:text-blue-400',
                  { 'pl-4': heading.level === 3 }
                ]}
                data-heading-link
              >
                {heading.text}
              </a>
            ))}
          </nav>
        </div>
      </aside>
    )}
  </article>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', () => {
  // Add IDs to headings
  const headings = document.querySelectorAll('h2, h3');
  headings.forEach((heading, index) => {
    heading.id = `section-${index}`;
  });

  // Smooth scroll to section when clicking on ToC links
  document.querySelectorAll('[data-heading-link]').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = link.getAttribute('href')?.slice(1);
      const targetElement = document.getElementById(targetId || '');
      if (targetElement) {
        targetElement.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });

  // Create a map to store all sections and their positions
  let sectionPositions: { id: string; top: number; bottom: number }[] = [];

  // Function to update section positions
  const updateSectionPositions = () => {
    sectionPositions = Array.from(headings).map(heading => {
      const rect = heading.getBoundingClientRect();
      return {
        id: heading.id,
        top: rect.top + window.scrollY,
        bottom: rect.bottom + window.scrollY
      };
    });
  };

  // Update positions on load and resize
  updateSectionPositions();
  window.addEventListener('resize', updateSectionPositions);

  // Function to get the current active section
  const getCurrentSection = () => {
    const scrollPosition = window.scrollY + window.innerHeight / 3;
    
    for (const section of sectionPositions) {
      if (scrollPosition >= section.top && scrollPosition < section.bottom) {
        return section.id;
      }
    }
    
    // If we're at the very bottom of the page, return the last section
    if (window.innerHeight + window.scrollY >= document.documentElement.scrollHeight) {
      return sectionPositions[sectionPositions.length - 1]?.id;
    }
    
    // If we're at the very top, return the first section
    if (window.scrollY < sectionPositions[0]?.top) {
      return sectionPositions[0]?.id;
    }
    
    return null;
  };

  // Function to update active link
  const updateActiveLink = () => {
    const currentSectionId = getCurrentSection();
    
    document.querySelectorAll('[data-heading-link]').forEach(link => {
      const href = link.getAttribute('href');
      if (href === `#${currentSectionId}`) {
        link.classList.add('text-blue-400', 'font-medium');
        link.classList.remove('text-gray-400');
      } else {
        link.classList.remove('text-blue-400', 'font-medium');
        link.classList.add('text-gray-400');
      }
    });
  };

  // Update active link on scroll
  let scrollTimeout: number;
  window.addEventListener('scroll', () => {
    if (scrollTimeout) {
      window.cancelAnimationFrame(scrollTimeout);
    }
    scrollTimeout = window.requestAnimationFrame(updateActiveLink);
  }, { passive: true });

  // Initial update
  updateActiveLink();
});
</script>